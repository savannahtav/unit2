{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CheckBox, Text } from '@rneui/themed';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Font from 'expo-font';\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction cacheFonts(_x) {\n  return _cacheFonts.apply(this, arguments);\n}\nfunction _cacheFonts() {\n  _cacheFonts = _asyncToGenerator(function* (fonts) {\n    return fonts.map(function () {\n      var _ref2 = _asyncToGenerator(function* (font) {\n        return yield Font.loadAsync(font);\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  });\n  return _cacheFonts.apply(this, arguments);\n}\nvar initTasks = [{\n  description: \"Task 1\",\n  completed: true,\n  key: 1\n}, {\n  description: \"Task 2\",\n  completed: true,\n  key: 2\n}];\nexport default function App() {\n  cacheFonts([FontAwesome.font]);\n  var _useState = useState(initTasks),\n    _useState2 = _slicedToArray(_useState, 2),\n    tasks = _useState2[0],\n    setTasks = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    input = _useState4[0],\n    setInput = _useState4[1];\n  var updateTask = function updateTask(task) {\n    console.log(task);\n    task.completed = !task.completed;\n    setTasks(_toConsumableArray(tasks));\n  };\n  var addTask = function addTask() {\n    var maxKey = 0;\n    tasks.forEach(function (task) {\n      if (task.key > maxKey) {\n        maxKey = task.key;\n      }\n    });\n    setTasks([].concat(_toConsumableArray(tasks), [{\n      description: input,\n      completed: false,\n      key: maxKey + 1\n    }]));\n    console.log(tasks);\n    setInput(\"\");\n  };\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(CheckBox, {\n      textStyle: item.completed ? {\n        textDecorationLine: \"line-through\",\n        textDecorationStyle: \"solid\"\n      } : undefined,\n      title: item.description,\n      checked: item.completed,\n      onPress: function onPress() {\n        return updateTask(item);\n      }\n    });\n  };\n  return _jsxs(View, {\n    style: [styles.container],\n    children: [_jsx(StatusBar, {\n      style: \"auto\"\n    }), _jsx(FlatList, {\n      data: tasks,\n      renderItem: renderItem\n    }), _jsxs(View, {\n      style: [styles.horizontal],\n      children: [_jsx(TextInput, {\n        onChangeText: setInput,\n        value: input,\n        placeholder: \"New task...\"\n      }), _jsx(Button, {\n        title: \"Add Task\",\n        onPress: addTask\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: '50%',\n    backgroundColor: '#0553'\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#DDDDDD',\n    padding: 10\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","View","CheckBox","Text","FlatList","TextInput","Button","Font","FontAwesome","useState","jsx","_jsx","jsxs","_jsxs","cacheFonts","_x","_cacheFonts","apply","arguments","_asyncToGenerator","fonts","map","_ref2","font","loadAsync","_x2","initTasks","description","completed","key","App","_useState","_useState2","_slicedToArray","tasks","setTasks","_useState3","_useState4","input","setInput","updateTask","task","console","log","_toConsumableArray","addTask","maxKey","forEach","concat","renderItem","_ref","item","textStyle","textDecorationLine","textDecorationStyle","undefined","title","checked","onPress","style","styles","container","children","data","horizontal","onChangeText","value","placeholder","create","image","flex","aspectRatio","width","backgroundColor","flexDirection","justifyContent","padding","alignItems","button"],"sources":["/Users/savannahtaverner/github/unit2-1/lab8/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport { CheckBox, Text } from '@rneui/themed';\nimport { FlatList } from 'react-native'\nimport { TextInput, Button } from 'react-native';\nimport * as Font from 'expo-font'\n\n\n\nimport FontAwesome from '@expo/vector-icons/FontAwesome'\n\nimport { useState } from 'react'\n\nasync function cacheFonts(fonts) {\n  return fonts.map(async (font) => await Font.loadAsync(font))\n}\n\nlet initTasks = [\n  {description: \"Task 1\", completed: true, key: 1},\n  {description: \"Task 2\", completed: true, key: 2}\n]\nexport default function App() {\n  cacheFonts([FontAwesome.font])\n  let [tasks, setTasks] = useState(initTasks)\n  let [input, setInput] = useState(\"\")\n  let updateTask = (task) => {\n    console.log(task)\n    task.completed = !task.completed\n    setTasks([...tasks])\n  }\n  \n  let addTask = () => {\n    let maxKey = 0\n    tasks.forEach(task => {\n      if(task.key > maxKey) {\n        maxKey = task.key\n      }\n\n    })\n    setTasks([...tasks, {\n      description: input,\n      completed: false,\n      key: maxKey+1\n    }])\n    console.log(tasks)\n    setInput(\"\")\n  }\n\n  let renderItem = ({item}) => {\n    return (\n    <CheckBox\n      textStyle={item.completed ? {\n        textDecorationLine: \"line-through\",\n        textDecorationStyle: \"solid\",\n      } : undefined}\n      title={item.description}\n      checked={item.completed}\n      onPress={() => updateTask(item)}\n      />\n    )\n\n  }\n  return (\n    <View style={[styles.container]}>\n      <StatusBar style=\"auto\" />\n        <FlatList data={tasks} renderItem={renderItem} />\n        <View style={[styles.horizontal]}>\n      <TextInput\n        onChangeText={setInput}\n        value={input}\n        placeholder=\"New task...\"\n      ></TextInput>< Button title=\"Add Task\" onPress={addTask}/>\n        </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  image: {\n    flex: 1,\n    aspectRatio: 1,\n    width: '50%',\n    backgroundColor: '#0553',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#DDDDDD',\n    padding: 10,\n  },\n\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}