{"ast":null,"code":"var _reactJsxRuntime = require(\"react/jsx-runtime\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar Stopwatch = function Stopwatch(_ref) {\n  var isRunning = _ref.isRunning;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    timer = _useState2[0],\n    setTimer = _useState2[1];\n  useEffect(function () {\n    var interval;\n    if (isRunning) {\n      interval = setInterval(function () {\n        setTimer(function (prevTimer) {\n          return prevTimer + 10;\n        });\n      }, 10);\n    } else {\n      clearInterval(interval);\n    }\n    return function () {\n      return clearInterval(interval);\n    };\n  }, [isRunning]);\n  console.log('Timer:', timer);\n  var formatTime = function formatTime(time) {\n    var milliseconds = Math.floor(time % 1000).toString().padStart(3, '0');\n    var seconds = Math.floor(time / 1000 % 60).toString().padStart(2, '0');\n    var minutes = Math.floor(time / (1000 * 60) % 60).toString().padStart(2, '0');\n    return `${minutes}:${seconds}:${milliseconds}`;\n  };\n  return _reactJsxRuntime.jsx(View, {\n    style: styles.container,\n    children: _reactJsxRuntime.jsx(Text, {\n      style: styles.timer,\n      children: formatTime(timer)\n    })\n  });\n};","map":{"version":3,"names":["Stopwatch","_ref","isRunning","_useState","useState","_useState2","_slicedToArray","timer","setTimer","useEffect","interval","setInterval","prevTimer","clearInterval","console","log","formatTime","time","milliseconds","Math","floor","toString","padStart","seconds","minutes","_reactJsxRuntime","jsx","View","style","styles","container","children","Text"],"sources":["/Users/savannahtaverner/github/unit2-2/lab9/components/StopWatch.js"],"sourcesContent":["const Stopwatch = ({ isRunning }) => {\n    const [timer, setTimer] = useState(0);\n  \n    useEffect(() => {\n      let interval;\n      if (isRunning) {\n        interval = setInterval(() => {\n          setTimer((prevTimer) => prevTimer + 10); // Update timer every 10 milliseconds\n        }, 10);\n      } else {\n        clearInterval(interval);\n      }\n  \n      return () => clearInterval(interval); // Cleanup interval on unmount or when isRunning changes\n    }, [isRunning]);\n  \n    // Log timer value to check if it's changing\n    console.log('Timer:', timer);\n  \n    const formatTime = (time) => {\n      const milliseconds = Math.floor(time % 1000).toString().padStart(3, '0');\n      const seconds = Math.floor((time / 1000) % 60).toString().padStart(2, '0');\n      const minutes = Math.floor((time / (1000 * 60)) % 60).toString().padStart(2, '0');\n      return `${minutes}:${seconds}:${milliseconds}`;\n    };\n  \n    return (\n      <View style={styles.container}>\n        <Text style={styles.timer}>{formatTime(timer)}</Text>\n      </View>\n    );\n  };\n  "],"mappings":";;AAAA,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAAC,IAAA,EAAsB;EAAA,IAAhBC,SAAS,GAAAD,IAAA,CAATC,SAAS;EAC1B,IAAAC,SAAA,GAA0BC,QAAQ,CAAC,CAAC,CAAC;IAAAC,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAA9BI,KAAK,GAAAF,UAAA;IAAEG,QAAQ,GAAAH,UAAA;EAEtBI,SAAS,CAAC,YAAM;IACd,IAAIC,QAAQ;IACZ,IAAIR,SAAS,EAAE;MACbQ,QAAQ,GAAGC,WAAW,CAAC,YAAM;QAC3BH,QAAQ,CAAC,UAACI,SAAS;UAAA,OAAKA,SAAS,GAAG,EAAE;QAAA,EAAC;MACzC,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,MAAM;MACLC,aAAa,CAACH,QAAQ,CAAC;IACzB;IAEA,OAAO;MAAA,OAAMG,aAAa,CAACH,QAAQ,CAAC;IAAA;EACtC,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC;EAGfY,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAER,KAAK,CAAC;EAE5B,IAAMS,UAAU,GAAG,SAAbA,UAAUA,CAAIC,IAAI,EAAK;IAC3B,IAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,GAAG,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACxE,IAAMC,OAAO,GAAGJ,IAAI,CAACC,KAAK,CAAEH,IAAI,GAAG,IAAI,GAAI,EAAE,CAAC,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1E,IAAME,OAAO,GAAGL,IAAI,CAACC,KAAK,CAAEH,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC,GAAI,EAAE,CAAC,CAACI,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACjF,OAAQ,GAAEE,OAAQ,IAAGD,OAAQ,IAAGL,YAAa,EAAC;EAChD,CAAC;EAED,OACEO,gBAAA,CAAAC,GAAA,CAACC,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,EAC5BN,gBAAA,CAAAC,GAAA,CAACM,IAAI;MAACJ,KAAK,EAAEC,MAAM,CAACtB,KAAM;MAAAwB,QAAA,EAAEf,UAAU,CAACT,KAAK;IAAC,CAAO;EAAC,CACjD,CAAC;AAEX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}