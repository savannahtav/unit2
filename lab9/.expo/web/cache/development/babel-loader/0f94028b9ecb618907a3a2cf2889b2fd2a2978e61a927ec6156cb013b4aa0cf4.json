{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react-native-web/dist/index\";\nimport { useState } from \"react-native-web/dist/index\";\nimport { useEffect } from \"react-native-web/dist/index\";\nimport { useRef } from \"react-native-web/dist/index\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function RunningExercise(_ref) {\n  var setMenuScreen = _ref.setMenuScreen;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    lapTimes = _useState2[0],\n    setLapTimes = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    timer = _useState4[0],\n    setTimer = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    hour = _useState6[0],\n    setHour = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    minute = _useState8[0],\n    setMinute = _useState8[1];\n  var _useState9 = useState(0),\n    _useState10 = _slicedToArray(_useState9, 2),\n    second = _useState10[0],\n    setSecond = _useState10[1];\n  var _useState11 = useState(0),\n    _useState12 = _slicedToArray(_useState11, 2),\n    count = _useState12[0],\n    setCount = _useState12[1];\n  var intervalRef = useRef();\n  var startTimer = function startTimer() {\n    if (!timer) {\n      intervalRef.current = setInterval(function () {\n        setCount(function (prevCount) {\n          return prevCount + 1;\n        });\n      }, 10);\n      setTimer(true);\n    }\n  };\n  var stopTimer = function stopTimer() {\n    clearInterval(intervalRef.current);\n    setTimer(false);\n  };\n  var resetTimer = function resetTimer() {\n    clearInterval(intervalRef.current);\n    setTimer(false);\n    setCount(0);\n    setHour(0);\n    setMinute(0);\n    setSecond(0);\n    setLapTimes([]);\n  };\n  useEffect(function () {\n    var hours = Math.floor(count / 360000);\n    var minutes = Math.floor((count - hours * 360000) / 6000);\n    var seconds = Math.floor((count - hours * 360000 - minutes * 6000) / 100);\n    setHour(hours);\n    setMinute(minutes);\n    setSecond(seconds);\n  }, [count]);\n  return _jsxs(View, {\n    children: [_jsxs(Text, {\n      children: [\"Timer: \", hour, \" : \", minute, \" : \", second]\n    }), _jsx(Button, {\n      title: timer ? 'Stop' : 'Start',\n      onPress: timer ? stopTimer : startTimer\n    }), _jsx(Button, {\n      title: \"Reset\",\n      onPress: resetTimer\n    })]\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","useRef","View","Text","Button","jsxs","_jsxs","jsx","_jsx","RunningExercise","_ref","setMenuScreen","_useState","_useState2","_slicedToArray","lapTimes","setLapTimes","_useState3","_useState4","timer","setTimer","_useState5","_useState6","hour","setHour","_useState7","_useState8","minute","setMinute","_useState9","_useState10","second","setSecond","_useState11","_useState12","count","setCount","intervalRef","startTimer","current","setInterval","prevCount","stopTimer","clearInterval","resetTimer","hours","Math","floor","minutes","seconds","children","title","onPress"],"sources":["/Users/savannahtaverner/github/unit2-2/lab9/components/RunningExercise.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react-native';\nimport { View, Text, Button } from 'react-native';\n\nexport default function RunningExercise({ setMenuScreen }) {\n  const [lapTimes, setLapTimes] = useState([]);\n  const [timer, setTimer] = useState(false);\n  const [hour, setHour] = useState(0);\n  const [minute, setMinute] = useState(0);\n  const [second, setSecond] = useState(0);\n  const [count, setCount] = useState(0);\n\n  const intervalRef = useRef();\n\n  // Function to start the timer\n  const startTimer = () => {\n    if (!timer) {\n      intervalRef.current = setInterval(() => {\n        setCount((prevCount) => prevCount + 1);\n      }, 10);\n      setTimer(true);\n    }\n  };\n\n  // Function to stop the timer\n  const stopTimer = () => {\n    clearInterval(intervalRef.current);\n    setTimer(false);\n  };\n\n  // Function to reset the timer\n  const resetTimer = () => {\n    clearInterval(intervalRef.current);\n    setTimer(false);\n    setCount(0);\n    setHour(0);\n    setMinute(0);\n    setSecond(0);\n    setLapTimes([]);\n  };\n\n  useEffect(() => {\n    // Convert count to hours, minutes, and seconds\n    let hours = Math.floor(count / 360000);\n    let minutes = Math.floor((count - hours * 360000) / 6000);\n    let seconds = Math.floor((count - hours * 360000 - minutes * 6000) / 100);\n    setHour(hours);\n    setMinute(minutes);\n    setSecond(seconds);\n  }, [count]);\n\n  return (\n    <View>\n      <Text>Timer: {hour} : {minute} : {second}</Text>\n      <Button title={timer ? 'Stop' : 'Start'} onPress={timer ? stopTimer : startTimer} />\n      <Button title=\"Reset\" onPress={resetTimer} />\n      {/* Add lap time display and buttons */}\n    </View>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}